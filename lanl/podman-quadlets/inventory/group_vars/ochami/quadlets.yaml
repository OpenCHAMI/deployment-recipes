podman_quadlet_networks:
  - name: ochami-internal
    internal: true
  - name: ochami-jwt-internal
    internal: true
  - name: ochami-cert-internal
    internal: true
  - name: ochami-external
    subnet: '{{ cloud_init_wireguard_subnet }}'

podman_quadlet_volumes:
  - name: step-ca-db
  - name: step-ca-home
  - name: step-root-ca
  - name: local-certs
  - name: haproxy-certs
  - name: acme-certs
  - name: postgres-data

podman_quadlet_containers: '{{ _ochami_init_quadlets + _postgres_quadlets + _step_ca_quadlets + _acme_quadlets + _hydra_quadlets + _opaal_quadlets + _ochami_quadlets + _haproxy_quadlets + _coresmd_quadlets + _image_server_quadlets + _configurator_quadlets }}'

podman_quadlet_start: ['ochami-init', 'image-server']

_ochami_init_quadlets:
  - name: ochami-init
    image: docker.io/library/alpine:latest
    entrypoint:
      - /bin/sh
      - -c 
      - sleep 1
    type: 'oneshot'
    restart: 'on-failure'
    after:
      - coresmd.service

  - name: ochami-jenga
    image: docker.io/library/alpine:latest
    entrypoint:
      - /bin/sh
      - -c
      - sleep 1
    type: oneshot
    restart: 'on-failure'

_step_ca_quadlets:
  - name: step-ca
    image: ghcr.io/openchami/local-ca:v0.2.2
    volumes:
      - step-ca-home.volume:/home/step
      - step-ca-db.volume:/home/step/db
      - step-root-ca.volume:/root_ca/
    envs:
      - STEPPATH=/home/step
      - DOCKER_STEPCA_INIT_NAME=OpenCHAMI
      - DOCKER_STEPCA_INIT_DNS_NAMES=localhost,step-ca
      - DOCKER_STEPCA_INIT_ACME=true
    networks:
      - ochami-cert-internal.network
    health:
      cmd: "step ca health"
      interval: '10s'
      retries: 5
      timeout: '10s'
    no_hosts: true
    after: 
      - ochami-jenga.service

_postgres_quadlets:
  - name: postgres
    image: docker.io/library/postgres:11.5-alpine
    secrets:
      - postgres_password,type=env,target=POSTGRES_PASSWORD
      - bss_postgres_password,type=env,target=BSS_POSTGRES_PASSWORD
      - smd_postgres_password,type=env,target=SMD_POSTGRES_PASSWORD
      - hydra_postgres_password,type=env,target=HYDRA_POSTGRES_PASSWORD
      - postgres_multiple_databases,type=env,target=POSTGRES_MULTIPLE_DATABASES
    envs:
      - POSTGRES_USER=ochami
    volumes:
      - postgres-data.volume:/var/lib/postgresql/data
      - /etc/ochami/pg-init:/docker-entrypoint-initdb.d
    networks:
      - ochami-internal.network
      - ochami-jwt-internal.network
    health:
      cmd: "pg_isready --dbname ${POSTGRES_USER} --username ${POSTGRES_USER}"
      interval: 10s
      timeout: 10s
      retries: 5
    after:
      - ochami-jenga.service

_acme_quadlets:
  - name: acme-register
    container_name: '{{ cluster_name }}.{{ cluster_domain }}'
    hostname: '{{ cluster_name }}.{{ cluster_domain }}'
    image: ghcr.io/openchami/acme.sh:v0.2.2
    envs:
      - 'SYSTEM_NAME={{ cluster_name }}'
      - 'SYSTEM_DOMAIN={{ cluster_domain }}'
    networks:
      - ochami-cert-internal.network
    volumes:
      - step-root-ca.volume:/root_ca/:ro
      - acme-certs.volume:/root/.acme.sh
    entrypoint: 
      - "/bin/sh"
      - "-c"
      - "/usr/bin/acme.sh --server https://step-ca:9000/acme/acme/directory --ca-bundle /root_ca/root_ca.crt -d {{ cluster_name }}.{{ cluster_domain }} --issue --standalone --force"
    after:
      - step-ca.service
    restart: 'on-failure'
    type: 'oneshot'
  - name: acme-deploy
    image: ghcr.io/openchami/acme.sh:v0.2.2
    envs:
      - 'SYSTEM_NAME={{ cluster_name }}'
      - 'SYSTEM_DOMAIN={{ cluster_domain }}'
      - 'DEPLOY_HAPROXY_PEM_PATH=/root/certs/'
    networks:
      - ochami-cert-internal.network
    volumes:
      - /:/root_ca/:ro
      - acme-certs:/root/.acme.sh
      - haproxy-certs:/root/certs/
    entrypoint: 
      - /bin/sh
      - -c 
      - "/usr/bin/acme.sh --server https://step-ca:9000/acme/acme/directory --ca-bundle /root_ca/root_ca.crt --deploy --deploy-hook haproxy --domain {{cluster_name}}.{{ cluster_domain }}"
    restart: 'on-failure'
    type: 'oneshot'
    after:
      - acme-register.service

_hydra_quadlets:
  - name: hydra-migrate
    image: docker.io/oryd/hydra:v2.2.0-rc.3
    secrets:
      - hydra_system_secret,type=env,target=SECRETS_SYSTEM
      - hydra_postgres_password,type=env,target=HYDRA_POSTGRES_PASSWORD
      - hydra_dsn,type=env,target=DSN
    command: 'migrate -c /etc/config/hydra/hydra.yml sql -e --yes'
    volumes:
      - /etc/ochami/configs/:/etc/config/hydra
    networks:
      - ochami-internal.network
    restart: 'on-failure'
    type: 'oneshot'
    after:
      - postgres.service
  - name: hydra
    image: docker.io/oryd/hydra:v2.2.0-rc.3
    command: 'serve -c /etc/config/hydra/hydra.yml all --sqa-opt-out'
    volumes:
      - /etc/ochami/configs/:/etc/config/hydra
    secrets:
      - hydra_system_secret,type=env,target=SECRETS_SYSTEM
      - hydra_dsn,type=env,target=DSN
    envs:
      - 'SYSTEM_NAME={{ cluster_name }}'
      - 'SYSTEM_DOMAIN={{ cluster_domain }}'
      - 'URLS_SELF_ISSUER=https://{{ cluster_name }}.{{ cluster_domain }}/'
      - 'URLS_SELF_PUBLIC=https://{{ cluster_name }}.{{ cluster_domain }}/'
      - 'URLS_LOGIN=https://{{ cluster_name }}.{{ cluster_domain }}/login'
      - 'URLS_CONSENT=https://{{ cluster_name }}.{{ cluster_domain }}/consent'
      - 'URLS_LOGOUT=https://{{ cluster_name }}.{{ cluster_domain }}/logout'
    after:
      - hydra-migrate.service
      - ochami-jenga.service
    networks:
      - ochami-jwt-internal.network
    health:
      cmd: "wget --spider -q http://hydra:4444/health/alive"
      interval: 10s
      timeout: 10s
      retries: 10

  # Fix for hydra race condition
  - name: hydra-gen-jwks
    image: cgr.dev/chainguard/curl:latest
    type: 'oneshot'
    command: '--retry 10 --retry-delay 5 --retry-all-errors --verbose http://hydra:4444/.well-known/jwks.json'
    networks:
      - ochami-jwt-internal.network
    restart: 'on-failure'
    after:
      - hydra.service

_opaal_quadlets:
  - name: opaal-idp
    image: ghcr.io/openchami/opaal:v0.3.10
    command: /opaal/opaal serve --config /opaal/config/opaal.yaml
    volumes:
      - /etc/ochami/configs:/opaal/config/
    networks:
      - ochami-jwt-internal
    health:
      cmd: "curl --fail --silent http://opaal-idp:3332/.well-known/jwks.json"
      interval: 5s
      timeout: 10s
      retries: 60
    after:
      - hydra-gen-jwks.service
  - name: opaal
    image: ghcr.io/openchami/opaal:v0.3.10
    command: '/opaal/opaal login --config /opaal/config/opaal.yaml'
    volumes:
      - /etc/ochami/configs:/opaal/config/
    networks:
      - ochami-internal.network
      - ochami-jwt-internal.network
    extra_hosts:
      - "{{ cluster_name }}.{{ cluster_domain }}:{{ cluster_boot_ip }}"
    post_start:
      - sleep 10s
    health:
      cmd: "curl --fail --silent http://opaal:3333/keys"
      interval: 5s
      timeout: 10s
      retries: 60
    after:
      - opaal-idp.service

_ochami_quadlets:
  - name: smd-init
    image: ghcr.io/openchami/smd:v2.18.0
    secrets:
      - smd_postgres_password,type=env,target=SMD_DBPASS
    envs:
      - SMD_DBHOST=postgres
      - SMD_DBPORT=5432
      - SMD_DBNAME=hmsds
      - SMD_DBUSER=smd-user
      - SMD_DBOPTS=sslmode=disable
    after:
      - postgres.service
    networks:
      - ochami-internal.network
    entrypoint: ["/bin/sh", "-c", "/smd-init"]
    restart: 'on-failure'
    type: 'oneshot'
  - name: smd
    image: ghcr.io/openchami/smd:v2.18.0
    secrets:
      - smd_postgres_password,type=env,target=SMD_DBPASS
    envs:
      - SMD_DBHOST=postgres
      - SMD_DBPORT=5432
      - SMD_DBNAME=hmsds
      - SMD_DBUSER=smd-user
      - SMD_DBOPTS=sslmode=disable
      - SMD_JWKS_URL=http://opaal:3333/keys
    health:
      cmd: "curl --fail --silent http://localhost:27779/hsm/v2/service/ready"
      interval: 5s
      retries: 60
      timeout: 10s

    after:
      - smd-init.service
      - opaal.service
    networks:
      - ochami-internal.network
  - name: bss-init
    image: ghcr.io/openchami/bss:v1.32.0
    secrets:
      - bss_postgres_password,type=env,target=BSS_DBPASS
    envs:
      - BSS_USESQL=true
      - BSS_INSECURE=true
      - BSS_DBHOST=postgres
      - BSS_DBPORT=5432
      - BSS_DBNAME=bssdb
      - BSS_DBUSER=bss-user
    after:
      - smd.service
    networks:
      - ochami-internal.network
    entrypoint: ["/bin/sh", "-c", "/usr/local/bin/bss-init"]
    restart: 'on-failure'
    type: 'oneshot'
  - name: bss
    image: ghcr.io/openchami/bss:v1.32.0
    secrets:
      - bss_postgres_password,type=env,target=BSS_DBPASS
    envs:
      - BSS_USESQL=true
      - BSS_INSECURE=true
      - BSS_DEBUG=true
      - BSS_DBHOST=postgres
      - BSS_DBPORT=5432
      - BSS_DBNAME=bssdb
      - BSS_DBUSER=bss-user
      - BSS_JWKS_URL=http://opaal:3333/keys
      - BSS_OAUTH2_ADMIN_BASE_URL=http://opaal:3333
      - BSS_OAUTH2_PUBLIC_BASE_URL=http://opaal:3333
      - 'BSS_IPXE_SERVER={{ cluster_name }}.{{ cluster_domain }}'
      - BSS_CHAIN_PROTO=https
    after:
      - bss-init.service
      - opaal.service
    networks:
      - ochami-internal.network
    health:
      cmd: "curl --fail --silent http://localhost:27778/boot/v1/service/status"
      interval: 5s
      retries: 60
      timeout: 10s

  - name: cloud-init-server
    image: ghcr.io/openchami/cloud-init:v1.2.3
    envs:
      - LISTEN_ADDR=:27777
      - SMD_URL=http://smd:27779
      - OPAAL_URL=http://opaal:3333
      - JWKS_URL=http://opaal:3333/keys
    after:
      - smd.service
      - opaal.service
    networks:
      - ochami-internal.network
      - 'ochami-external.network:ip={{ cloud_init_wireguard_endpoint }}'
    capabilities:
      - CAP_NET_ADMIN
#    command: '/usr/local/bin/cloud-init-server --listen 0.0.0.0:27777 --smd-url http://smd:27779 --token-url http://opaal:3333/token --jwks-url http://opaal:3333/keys --impersonation=true --cluster-name {{ cluster_name }} --wireguard-server {{ cloud_init_wireguard_server }}/16 --wireguard-only --debug'
    command: '/usr/local/bin/cloud-init-server --listen 0.0.0.0:27777 --smd-url http://smd:27779 --token-url http://opaal:3333/token --impersonation=true --cluster-name {{ cluster_name }}'
    health:
      cmd: "curl http://127.0.0.1:27777/cloud-init/version"
      interval: '10s'
      retries: 5
      timeout: '10s'

_haproxy_quadlets:
  - name: haproxy
    image: cgr.dev/chainguard/haproxy
    ports:
      - "{{ cluster_boot_ip }}:8081:80"
      - "{{ cluster_boot_ip }}:8443:443"
    networks:
      - ochami-external.network
      - ochami-internal.network
      - ochami-jwt-internal.network
    volumes:
      - /etc/ochami/configs/:/usr/local/etc/haproxy/:ro
      - haproxy-certs.volume:/etc/haproxy/certs/:ro
    after:
      - opaal.service
      - bss.service
      - acme-deploy.service
      - cloud-init-server.service
    health:
      cmd: "bash -c 'exec 3<>/dev/tcp/haproxy/8404; echo -e \"GET / HTTP/1.1\\nConnection: close\\n\" >&3; cat <&3 | grep \"200 OK\"'"
      interval: '10s'
      retries: 5
      timeout: '10s'

_coresmd_quadlets:
  - name: coresmd
    image: ghcr.io/openchami/coredhcp:v0.3.1
    capabilities:
      - NET_ADMIN
      - NET_RAW
    volumes:
      - step-root-ca.volume:/root_ca/:ro
      - /etc/ochami/configs/coredhcp.yaml:/etc/coredhcp/config.yaml:ro
    networks:
      - host
    after:
      - haproxy.service
    health:
      cmd: "dhcping -c {{cluster_boot_ip}} -s {{cluster_boot_ip}} -h 00:00:00:00:00:00"
      interval: '10s'
      retries: 5
      timeout: '10s'

_image_server_quadlets:
  - name: image-server
    image: docker.io/library/nginx:latest
    volumes:
      - /data/domain-images:/usr/share/nginx/html:ro
    ports:
      - '{{ cluster_boot_ip }}:8080:80'
    pre_start:
      - mkdir -p /data/domain-images
      - echo "Service Available" > /data/domain-images/index.html
      - chmod a+r  /data/domain-images/index.html
    health:
      cmd: "curl --fail --silent http://image-server"
      interval: '10s'
      retries: 5
      timeout: '10s'

_configurator_quadlets:
  - name: configurator
    image: ghcr.io/openchami/configurator:v0.2.1
    command: '/configurator/configurator serve --verbose --config /usr/local/etc/configurator.yaml'
    networks:
      - ochami-internal.network
    volumes:
      - /etc/ochami/configs/configurator.yaml:/usr/local/etc/configurator.yaml
    after:
      - smd.service
