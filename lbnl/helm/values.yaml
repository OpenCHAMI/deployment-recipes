---
postgres:
  deployment:
    replicaCount: 1
    image:
      repository: docker.io
      name: postgres
      tag: "11.5-alpine"
      pullPolicy: IfNotPresent
    containerPort: 5432

  service:
    type: ClusterIP
    port: 5432

  pvc_name: postgres-data
  dbmount: /var/lib/postgresql/data
  dbname: ochami

postgresql:
  enabled: true
  auth:
    username: ochami
    # https://github.com/OpenCHAMI/deployment-recipes/blob/main/quickstart/pg-init/multi-psql-db.sh does kinda suggest
    # that the project will want multiple databases, which the Bitnami chart seemingly doesn't support (at least given
    # the single value auth.database key. Dunno if there's even a way to have multiple subchart instances of the same
    # chart if we want to just use separate instances to deal with that. However, for now, the original chart config
    # only suggests the one database, so vOv.
    database: ochami
  image:
    tag: 16.4.0
  service:
    ports:
      postgresql: "5432"

smd:
  deployment:
    replicaCount: 1
    image:
      repository: ghcr.io/openchami
      name: smd
      tag: "v2.14.2"
      pullPolicy: IfNotPresent
    containerPort: 27779
  dbname: hmsds

  service:
    type: ClusterIP
    port: 27779
    annotations:

bss:
  deployment:
    replicaCount: 1
    image:
      repository: ghcr.io/openchami
      name: bss
      pullPolicy: IfNotPresent
      tag: "v1.29.1"
    containerPort: 27778
  dbname: bssdb

  service:
    type: ClusterIP
    port: 27778
    annotations:

krakend:
  deployment:
    replicaCount: 1
    image:
      repository: docker.io/devopsfaith
      name: krakend
      pullPolicy: IfNotPresent
      tag: "2.5.1"
    containerPort: 8080

  service:
    type: ClusterIP
    port: 80
    annotations:
      # Specify which BackendConfig to use for GKE to ensure the ingress
      # backend is healthy. The GKE docs say that sufficient annotation of the
      # KrakenD Deployment using the standard K8s API should be sufficient to
      # inspect the ingress backend, but I have not been successful in making
      # that work. Specifying the BackendConfig by hand seems to help.
      cloud.google.com/backend-config: '{"default": "krakend-hc-config"}'

# Parameters specific to deploying into Google Kubernetes Engine
gke:
  gateway:
    class: gke-l7-global-external-managed
    port: 80
  securityPolicy: lbnl-nersc

tftpd:
  deployment:
    replicaCount: 1
    image:
      repository: ghcr.io/openchami
      name: tftpd
      pullPolicy: IfNotPresent
      tag: "0.1"
    containerPort: 69

  service:
    type: LoadBalancer
    port: 69
    # Since GKE external network LoadBalancers are not proxied, it might be a
    # good idea to add an annotation like loadBalancerSourceRanges to limit who
    # can access the Service.
    annotations:

dnsmasq:
  deployment:
    replicaCount: 1
    image:
      repository: ghcr.io/openchami
      name: dnsmasq
      pullPolicy: IfNotPresent
      tag: dynamic
    dhcp_port: 67
    tftp_port: 69

  service:
    dhcp:
      type: LoadBalancer
      port: 67
      # Since GKE external network LoadBalancers are not proxied, it might be a
      # good idea to add an annotation like loadBalancerSourceRanges to limit who
      # can access the Service.
      annotations:

    tftp:
      type: LoadBalancer
      port: 69
      # Since GKE external network LoadBalancers are not proxied, it might be a
      # good idea to add an annotation like loadBalancerSourceRanges to limit who
      # can access the Service.
      annotations:

hydra:
  deployment:
    replicaCount: 1
    image:
      repository: docker.io/oryd
      name: hydra
      pullPolicy: IfNotPresent
      tag: "v2.2.0"
    containerPorts:
      public: 4444
      admin: 4445
      tokenuser: 5555

  service:
    type: ClusterIP
    ports:
      public: 4444
      admin: 4445
      tokenuser: 5555
    annotations:

hydra_consent:
  deployment:
    image:
      repository: docker.io/oryd
      name: hydra-login-consent-node
      pullPolicy: IfNotPresent
      tag: "v2.2.0"
    containerPorts:
      consent: 3000

  service:
    type: ClusterIP
    ports:
      consent: 3000
    annotations:

swiss_army_knife:
  deployment:
    replicaCount: 1
    image:
      repository: docker.io/leodotcloud
      name: swiss-army-knife
      pullPolicy: IfNotPresent
      tag: latest

lighttpd:
  deployment:
    replicaCount: 1
    image:
      repository: ghcr.io/openchami
      name: lighttpd
      pullPolicy: IfNotPresent
      tag: 0.1
    containerPort: 8080

  pvc_name: lighttpd
  mount_path: /var/www/html

  service:
    type: ClusterIP
    port: 80
    annotations:
      cloud.google.com/backend-config: '{"default": "lighttpd-backendconfig"}'
