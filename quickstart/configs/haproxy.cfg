global
  stats socket /var/run/api.sock user haproxy group haproxy mode 660 level admin expose-fd listeners
  log stdout format raw local0 info
  fd-hard-limit 50000
  ssl-default-bind-options ssl-min-ver TLSv1.3 no-tls-tickets

defaults
  mode http
  timeout client 10s
  timeout connect 5s
  timeout server 10s
  timeout http-request 10s
  log global

frontend stats
  bind *:8404
  stats enable
  stats uri /
  stats refresh 10s

frontend openchami
  bind :80
  bind :443 ssl crt /etc/haproxy/certs/ strict-sni
  option forwardfor

      ### JWT validation ###
    # Define ACL for exempted paths
    acl PATH_exempted path_beg -i /browser/login /boot/v1/bootscript /login /oidc/callback /token /.well-known /apis/bss/boot/v1/bootscript

    # Allow requests for exempted paths to bypass JWT authentication
    http-request allow if PATH_exempted

    # Reject requests without Authorization header
  http-request deny status 409 content-type 'text/html' string 'Missing Authorization HTTP header' unless { req.hdr(authorization) -m found }

    ### JWT validation ###
    # get header part of JWT
    http-request set-var(txn.kid) http_auth_bearer,jwt_header_query('$.kid')
    http-request set-var(txn.alg) http_auth_bearer,jwt_header_query('$.alg')

    # get payload part of the JWT
    http-request set-var(txn.iss) http_auth_bearer,jwt_payload_query('$.iss')
    http-request set-var(txn.aud) http_auth_bearer,jwt_payload_query('$.aud')
    http-request set-var(txn.exp) http_auth_bearer,jwt_payload_query('$.exp','int')
    http-request set-var(txn.scope) http_auth_bearer,jwt_payload_query('$.scope')
    http-request set-var(txn.roles) http_auth_bearer,jwt_payload_query('$.roles[*]')

    # Validate the JWT
    http-request deny content-type 'text/html' string 'Unsupported JWT signing algorithm'  unless { var(txn.alg) -m str RS256 }
    http-request set-var(txn.now) date()
    http-request deny content-type 'text/html' string 'JWT has expired' if { var(txn.exp),sub(txn.now) -m int lt 0 }

        # I know this is ugly but its the best we got :(
    acl verify0 http_auth_bearer,jwt_verify(txn.alg,"/etc/haproxy/jwt/public_key.pem") -m int 1



    http-request deny status 401 content-type 'text/html' string 'Invalid JWT signature'  unless verify0



  acl PATH_smd path_beg -i /hsm/v2
  acl PATH_opaal path_beg -i /token
  acl PATH_opaal path_beg -i /login
  acl PATH_bss path_beg -i /boot/v1
  acl PATH_bss path_beg -i /apis/bss/
  acl PATH_opaal-idp path_beg -i /.well-known/openid-configuration
  acl PATH_opaal-idp path_beg -i /.well-known/jwks.json
  acl PATH_opaal-idp path_beg -i /browser/login
  acl PATH_opaal-idp path_beg -i /api/login
  acl PATH_opaal path_beg -i /oidc/callback
  use_backend opaal if PATH_opaal
  use_backend opaal-idp if PATH_opaal-idp
  use_backend smd if PATH_smd
  use_backend bss if PATH_bss

backend opaal
  server opaal opaal:3333

backend opaal-idp
  server opaal-idp opaal-idp:3332

backend smd
  server smd smd:27779

backend bss
  server bss bss:27778
  http-request replace-path ^/apis/bss/(.*) /\1



